--Start from the master table, (cust_info in this case) then use left joins so no data gets left out
--If you use an inner join and the second table didn't have data on all the customers, you would lose data.


SELECT
	ci.cst_id,
	ci.cst_key,
	ci.cst_firstname,
	ci.cst_lastname,
	ci.cst_marital_status,
	ci.cst_gndr,
	ci.cst_create_date,
	ca.bdate,
	ca.gen,
	la.cntry
FROM silver.crm_cust_info ci
LEFT JOIN silver.erp_cust_az12 ca
ON	ci.cst_key = ca.cid
LEFT JOIN silver.erp_loc_a101 la
ON ci.cst_key = la.cid


--Use this query after joining to see if the joins caused any duplicates

--SELECT cst_id, COUNT(*)
--FROM 
--(
	--SELECT
		--ci.cst_id,
		--ci.cst_key,
		--ci.cst_firstname,
		--ci.cst_lastname,
		--ci.cst_marital_status,
		--ci.cst_gndr,
		--ci.cst_create_date,
		--ca.bdate,
		--la.cntry
	--FROM silver.crm_cust_info ci
	--LEFT JOIN silver.erp_cust_az12 ca
	--ON	ci.cst_key = ca.cid
	--LEFT JOIN silver.erp_loc_a101 la
	--ON ci.cst_key = la.cid
--)t
--GROUP BY cst_id 
--HAVING COUNT(*) >1


--Date integration: Two tables had the gender column, use this query to 
--see what is going on with the columns in these two tables.
--Go to the experts within the company to see which column contains the
--most accurate info. Here it is the data coming from the CRM. 
--We will include a CASE statement that will pull data from the crm table first
--but if a value is n/a then it will pull from the second table.
--The coalesce function makes the null a 'n/a'
SELECT DISTINCT
	ci.cst_gndr,
	ca.gen,
	CASE WHEN ci.cst_gndr != 'n/a' THEN ci.cst_gndr  --CRM is the Master for gender info
		ELSE COALESCE(ca.gen, 'n/a')
	END AS new_gen
FROM silver.crm_cust_info ci
LEFT JOIN silver.erp_cust_az12 ca
ON	ci.cst_key = ca.cid
LEFT JOIN silver.erp_loc_a101 la
ON ci.cst_key = la.cid
ORDER BY 1,2
